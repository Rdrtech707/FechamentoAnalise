# ================= app.py =================
# Arquivo: app.py

import pandas as pd
import logging
import sys
from datetime import datetime
from config import (
    MDB_FILE, MDB_PASSWORD, OUTPUT_DIR, LOG_LEVEL, LOG_FILE, 
    FILE_ENCODING, MAX_RECORDS, EXCEL_SETTINGS, FORMATTING,
    ConfigError, get_config_summary
)
from modules.access_db import get_connection_context, DatabaseConnectionError, test_connection, get_database_info
from modules.extractors import extract_all_data, ExtractionError
from modules.processors import process_recebimentos
from modules.exporters import export_to_excel


def setup_logging():
    """Configura o sistema de logging"""
    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL.upper()),
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(LOG_FILE, encoding=FILE_ENCODING),
            logging.StreamHandler(sys.stdout)
        ]
    )
    return logging.getLogger(__name__)


def validate_input(year: str, month: str) -> tuple[str, str]:
    """
    Valida e formata os inputs de ano e mês
    
    Args:
        year: Ano informado pelo usuário
        month: Mês informado pelo usuário
        
    Returns:
        tuple: (ano_validado, mes_validado)
        
    Raises:
        ValueError: Se os valores não forem válidos
    """
    # Remove espaços e valida se são números
    year = year.strip()
    month = month.strip()
    
    if not year.isdigit() or not month.isdigit():
        raise ValueError("Ano e mês devem ser números válidos")
    
    year_int = int(year)
    month_int = int(month)
    
    # Validação de ano (entre 2000 e 2100)
    if year_int < 2000 or year_int > 2100:
        raise ValueError("Ano deve estar entre 2000 e 2100")
    
    # Validação de mês (entre 1 e 12)
    if month_int < 1 or month_int > 12:
        raise ValueError("Mês deve estar entre 1 e 12")
    
    # Formata mês com zero à esquerda
    month_formatted = f"{month_int:02d}"
    
    return year, month_formatted


def main():
    """Função principal da aplicação"""
    logger = setup_logging()
    
    try:
        logger.info("Iniciando aplicação de processamento de recebimentos")
        
        # Exibe resumo das configurações
        config_summary = get_config_summary()
        logger.info(f"Configurações carregadas: {config_summary}")
        
        # Testa conexão com banco antes de prosseguir
        logger.info("Testando conexão com banco de dados...")
        if not test_connection(MDB_FILE, MDB_PASSWORD):
            print("❌ Falha no teste de conexão com banco de dados")
            return
        
        # Obtém informações do banco
        db_info = get_database_info(MDB_FILE, MDB_PASSWORD)
        if db_info:
            logger.info(f"Banco de dados: {db_info['file_path']}")
            logger.info(f"Tabelas encontradas: {db_info['table_count']}")
            #logger.info(f"Lista de tabelas: {db_info['tables']}")
        
        # Pergunta mês e ano ao usuário
        year = input("Informe o ano (YYYY): ").strip()
        month = input("Informe o mês (MM): ").strip()
        
        # Valida inputs
        try:
            year_validated, month_validated = validate_input(year, month)
            periodo = f"{year_validated}-{month_validated}"
            logger.info(f"Período selecionado: {periodo}")
        except ValueError as e:
            logger.error(f"Erro na validação de input: {e}")
            print(f"❌ Erro: {e}")
            return
        
        # Conecta e extrai dados usando context manager
        logger.info("Conectando ao banco de dados...")
        try:
            with get_connection_context(MDB_FILE, MDB_PASSWORD) as conn:
                logger.info("Conexão com banco de dados estabelecida com sucesso")
                
                # Extrai dados usando a nova função consolidada
                try:
                    ordens_df, contas_df, fcaixa_df = extract_all_data(conn)
                    
                    # Aplica limite de registros se configurado
                    if MAX_RECORDS > 0:
                        logger.info(f"Aplicando limite de {MAX_RECORDS} registros")
                        ordens_df = ordens_df.head(MAX_RECORDS)
                        contas_df = contas_df.head(MAX_RECORDS)
                        fcaixa_df = fcaixa_df.head(MAX_RECORDS)
                        
                except ExtractionError as e:
                    logger.error(f"Erro na extração de dados: {e}")
                    print(f"❌ Erro na extração de dados: {e}")
                    return
                except Exception as e:
                    logger.error(f"Erro inesperado na extração: {e}")
                    print(f"❌ Erro inesperado na extração: {e}")
                    return
                    
        except DatabaseConnectionError as e:
            logger.error(f"Erro de conexão com banco de dados: {e}")
            print(f"❌ Erro de conexão com banco de dados: {e}")
            return
        except Exception as e:
            logger.error(f"Erro inesperado na conexão: {e}")
            print(f"❌ Erro inesperado na conexão: {e}")
            return

        # Processa recebimentos
        logger.info("Processando recebimentos...")
        try:
            recibos = process_recebimentos(ordens_df, contas_df, fcaixa_df, periodo)
            logger.info(f"Processamento concluído: {len(recibos)} registros processados")
        except Exception as e:
            logger.error(f"Erro no processamento: {e}")
            print(f"❌ Erro no processamento dos dados: {e}")
            return

        # Remove hora, mantendo apenas a data
        try:
            recibos['DATA PGTO'] = pd.to_datetime(recibos['DATA PGTO']).dt.date
            recibos['DATA ENCERRAMENTO'] = pd.to_datetime(recibos['DATA ENCERRAMENTO']).dt.date
        except Exception as e:
            logger.warning(f"Erro ao converter datas: {e}")

        # Reordena colunas
        column_order = [
            'N° OS', 'DATA PGTO', 'VALOR TOTAL', 'VALOR MÃO DE OBRA',
            'VALOR PEÇAS', 'DESCONTO', 'VALOR PAGO', 'DEVEDOR', 'CARTÃO', 'DINHEIRO',
            'PIX', 'TROCO', 'VEÍCULO (PLACA)', 'CÓDIGO CLIENTE', 'DATA ENCERRAMENTO'
        ]
        
        # Verifica se todas as colunas existem
        missing_columns = [col for col in column_order if col not in recibos.columns]
        if missing_columns:
            logger.warning(f"Colunas não encontradas: {missing_columns}")
            # Remove colunas que não existem da lista de ordenação
            column_order = [col for col in column_order if col in recibos.columns]
        
        recibos = recibos[column_order]

        # Filtra pelo período desejado baseado em DATA PGTO
        try:
            valid = recibos.dropna(subset=['DATA PGTO']).copy()
            valid['MES'] = valid['DATA PGTO'].astype(str).str.slice(0, 7)
            
            if periodo in valid['MES'].unique():
                df_periodo = valid[valid['MES'] == periodo].drop(columns='MES')
                logger.info(f"Encontrados {len(df_periodo)} registros para o período {periodo}")
                
                # Exporta para Excel
                try:
                    export_to_excel(
                        {periodo: df_periodo}, 
                        output_dir=OUTPUT_DIR,
                        border_theme='default'  # Pode ser alterado para 'corporate', 'dark', 'minimal'
                    )
                    logger.info(f"Arquivo Excel gerado com sucesso em {OUTPUT_DIR}")
                    print(f"✅ Arquivo gerado: {OUTPUT_DIR}/Recebimentos_{periodo}.xlsx")
                except Exception as e:
                    logger.error(f"Erro ao exportar para Excel: {e}")
                    print(f"❌ Erro ao gerar arquivo Excel: {e}")
                    return
            else:
                logger.warning(f"Nenhum registro encontrado para o período {periodo}")
                print(f"⚠️ Nenhum registro encontrado para o período {periodo}")
        except Exception as e:
            logger.error(f"Erro ao filtrar por período: {e}")
            print(f"❌ Erro ao filtrar dados por período: {e}")
            return
        
        logger.info("Processamento concluído com sucesso")
        print("✅ Processamento concluído com sucesso!")
        
    except KeyboardInterrupt:
        logger.info("Aplicação interrompida pelo usuário")
        print("\n⚠️ Aplicação interrompida pelo usuário")
    except ConfigError as e:
        logger.error(f"Erro de configuração: {e}")
        print(f"❌ Erro de configuração: {e}")
    except Exception as e:
        logger.error(f"Erro inesperado: {e}", exc_info=True)
        print(f"❌ Erro inesperado: {e}")
        print("Consulte o arquivo app.log para mais detalhes")


if __name__ == '__main__':
    main()


# ================= config.py =================
# Arquivo: config.py

import os
from dotenv import load_dotenv
from typing import Optional


class ConfigError(Exception):
    """Exceção personalizada para erros de configuração"""
    pass


def validate_required_env_var(var_name: str, value: Optional[str]) -> str:
    """
    Valida se uma variável de ambiente obrigatória foi carregada
    
    Args:
        var_name: Nome da variável de ambiente
        value: Valor da variável
        
    Returns:
        str: Valor validado
        
    Raises:
        ConfigError: Se a variável não foi definida
    """
    if value is None or value.strip() == "":
        raise ConfigError(
            f"Variável de ambiente '{var_name}' não foi definida. "
            f"Verifique se existe no arquivo .env ou nas variáveis do sistema."
        )
    return value.strip()


def get_env_var(var_name: str, default: Optional[str] = None) -> Optional[str]:
    """
    Obtém uma variável de ambiente com valor padrão opcional
    
    Args:
        var_name: Nome da variável de ambiente
        default: Valor padrão se a variável não existir
        
    Returns:
        str: Valor da variável ou valor padrão
    """
    return os.getenv(var_name, default)


# Carrega variáveis de ambiente do arquivo .env
load_dotenv()

# === CONFIGURAÇÕES OBRIGATÓRIAS ===
try:
    # Caminho para o arquivo .mdb e senha (obrigatórias)
    MDB_FILE = validate_required_env_var("MDB_FILE", get_env_var("MDB_FILE"))
    MDB_PASSWORD = validate_required_env_var("MDB_PASSWORD", get_env_var("MDB_PASSWORD"))
except ConfigError as e:
    print(f"❌ Erro de configuração: {e}")
    print("📋 Verifique se o arquivo .env existe e contém as variáveis necessárias:")
    print("   MDB_FILE=caminho/para/arquivo.mdb")
    print("   MDB_PASSWORD=sua_senha")
    raise

# === CONFIGURAÇÕES OPCIONAIS ===
# Diretório de saída para arquivos Excel
OUTPUT_DIR = get_env_var("OUTPUT_DIR", "data/recebimentos")

# Idioma da aplicação (pt_BR, en_US, etc.)
LANGUAGE = get_env_var("LANGUAGE", "pt_BR")

# Formato de data (DD/MM/YYYY, YYYY-MM-DD, etc.)
DATE_FORMAT = get_env_var("DATE_FORMAT", "DD/MM/YYYY")

# Formato de moeda (BRL, USD, EUR, etc.)
CURRENCY_FORMAT = get_env_var("CURRENCY_FORMAT", "BRL")

# Nível de log (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL = get_env_var("LOG_LEVEL", "INFO")

# Arquivo de log
LOG_FILE = get_env_var("LOG_FILE", "app.log")

# Encoding para arquivos
FILE_ENCODING = get_env_var("FILE_ENCODING", "utf-8")

# Timeout para conexão com banco (em segundos)
DB_TIMEOUT = int(get_env_var("DB_TIMEOUT", "30"))

# Máximo de registros para processar (0 = sem limite)
MAX_RECORDS = int(get_env_var("MAX_RECORDS", "0"))

# Configurações de Excel
EXCEL_SETTINGS = {
    "engine": get_env_var("EXCEL_ENGINE", "openpyxl"),
    "sheet_name": get_env_var("EXCEL_SHEET_NAME", "Recebimentos"),
    "index": get_env_var("EXCEL_INCLUDE_INDEX", "false").lower() == "true"
}

# Configurações de formatação
FORMATTING = {
    "currency_format": get_env_var("CURRENCY_EXCEL_FORMAT", "R$ #,##0.00"),
    "date_format": get_env_var("DATE_EXCEL_FORMAT", "dd/mm/yyyy"),
    "auto_adjust_columns": get_env_var("AUTO_ADJUST_COLUMNS", "true").lower() == "true"
}


def validate_config() -> None:
    """
    Valida todas as configurações carregadas
    
    Raises:
        ConfigError: Se alguma configuração for inválida
    """
    # Validações básicas
    if not os.path.exists(MDB_FILE):
        raise ConfigError(f"Arquivo .mdb não encontrado: {MDB_FILE}")
    
    if DB_TIMEOUT <= 0:
        raise ConfigError("DB_TIMEOUT deve ser maior que 0")
    
    if MAX_RECORDS < 0:
        raise ConfigError("MAX_RECORDS deve ser maior ou igual a 0")
    
    # Validações de diretório
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    # Validações de formato
    valid_languages = ["pt_BR", "en_US", "es_ES"]
    if LANGUAGE not in valid_languages:
        raise ConfigError(f"LANGUAGE deve ser um dos valores: {valid_languages}")
    
    valid_currencies = ["BRL", "USD", "EUR"]
    if CURRENCY_FORMAT not in valid_currencies:
        raise ConfigError(f"CURRENCY_FORMAT deve ser um dos valores: {valid_currencies}")


def get_config_summary() -> dict:
    """
    Retorna um resumo das configurações atuais
    
    Returns:
        dict: Dicionário com as configurações principais
    """
    return {
        "database": {
            "file": MDB_FILE,
            "timeout": DB_TIMEOUT
        },
        "output": {
            "directory": OUTPUT_DIR,
            "encoding": FILE_ENCODING
        },
        "formatting": {
            "language": LANGUAGE,
            "currency": CURRENCY_FORMAT,
            "date_format": DATE_FORMAT
        },
        "logging": {
            "level": LOG_LEVEL,
            "file": LOG_FILE
        },
        "processing": {
            "max_records": MAX_RECORDS
        }
    }


# Valida configurações na importação
try:
    validate_config()
except ConfigError as e:
    print(f"❌ Erro na validação de configurações: {e}")
    raise


# ================= modules/access_db.py =================
# Arquivo: modules/access_db.py

import pyodbc


def get_connection(mdb_file: str, password: str):
    """
    Conecta ao .mdb/.accdb usando ODBC.
    """
    conn_str = (
        r"DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};"
        rf"DBQ={mdb_file};"
        rf"PWD={password};"
    )
    return pyodbc.connect(conn_str)


# ============================================================================
# ARQUIVO: modules/extractors.py
# ============================================================================

import pandas as pd
import logging
from typing import List, Dict, Any
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError


class ExtractionError(Exception):
    """Exceção personalizada para erros de extração de dados"""
    pass


def validate_required_columns(df: pd.DataFrame, table_name: str, expected_columns: List[str]) -> bool:
    """
    Valida se o DataFrame contém todas as colunas esperadas.
    
    Args:
        df: DataFrame a ser validado
        table_name: Nome da tabela para logging
        expected_columns: Lista de colunas esperadas
        
    Returns:
        bool: True se todas as colunas estão presentes
        
    Raises:
        ExtractionError: Se colunas obrigatórias estiverem ausentes
    """
    missing_columns = [col for col in expected_columns if col not in df.columns]
    
    if missing_columns:
        error_msg = f"Colunas obrigatórias ausentes na tabela {table_name}: {missing_columns}"
        logging.error(error_msg)
        logging.error(f"Colunas encontradas: {list(df.columns)}")
        raise ExtractionError(error_msg)
    
    # Log de colunas extras (apenas warning)
    extra_columns = [col for col in df.columns if col not in expected_columns]
    if extra_columns:
        logging.warning(f"Colunas extras encontradas na tabela {table_name}: {extra_columns}")
    
    return True


def get_ordens(conn) -> pd.DataFrame:
    """
    Extrai dados da tabela ORDENS usando SQL parametrizado.
    
    Args:
        conn: Conexão com banco de dados
        
    Returns:
        pd.DataFrame: Dados extraídos da tabela ORDENS
        
    Raises:
        ExtractionError: Se houver erro na extração
    """
    try:
        # Define colunas esperadas
        expected_columns = [
            'N_OS', 'DATA_PGTO', 'VALOR_TOTAL', 'VALOR_MAO_DE_OBRA',
            'VALOR_PECAS', 'DESCONTO', 'VEICULO_PLACA', 'CODIGO_CLIENTE', 'DATA_ENCERRAMENTO'
        ]
        
        # Query parametrizada usando SQLAlchemy
        query = text("""
            SELECT 
                N_OS,
                DATA_PGTO,
                VALOR_TOTAL,
                VALOR_MAO_DE_OBRA,
                VALOR_PECAS,
                DESCONTO,
                VEICULO_PLACA,
                CODIGO_CLIENTE,
                DATA_ENCERRAMENTO
            FROM ORDENS
        """)
        
        logging.info("Iniciando extração da tabela ORDENS...")
        
        # Executa query usando pandas
        df = pd.read_sql(query, conn)
        
        # Valida colunas
        validate_required_columns(df, 'ORDENS', expected_columns)
        
        # Log detalhado da extração
        logging.info(f"✅ Extração ORDENS concluída: {len(df)} registros")
        logging.info(f"   Colunas extraídas: {list(df.columns)}")
        
        # Log de estatísticas básicas
        if not df.empty:
            logging.info(f"   Período: {df['DATA_PGTO'].min()} a {df['DATA_PGTO'].max()}")
            logging.info(f"   Valor total médio: {df['VALOR_TOTAL'].mean():.2f}")
            logging.info(f"   Registros com desconto: {len(df[df['DESCONTO'] > 0])}")
        
        return df
        
    except SQLAlchemyError as e:
        error_msg = f"Erro SQL na extração da tabela ORDENS: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)
    except Exception as e:
        error_msg = f"Erro inesperado na extração da tabela ORDENS: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)


def get_contas(conn) -> pd.DataFrame:
    """
    Extrai dados da tabela CONTAS usando SQL parametrizado.
    
    Args:
        conn: Conexão com banco de dados
        
    Returns:
        pd.DataFrame: Dados extraídos da tabela CONTAS
        
    Raises:
        ExtractionError: Se houver erro na extração
    """
    try:
        # Define colunas esperadas
        expected_columns = ['REFERENCIA', 'VALOR', 'PAGO', 'FORMA_PGTO']
        
        # Query parametrizada
        query = text("""
            SELECT 
                REFERENCIA,
                VALOR,
                PAGO,
                FORMA_PGTO
            FROM CONTAS
        """)
        
        logging.info("Iniciando extração da tabela CONTAS...")
        
        # Executa query
        df = pd.read_sql(query, conn)
        
        # Valida colunas
        validate_required_columns(df, 'CONTAS', expected_columns)
        
        # Log detalhado da extração
        logging.info(f"✅ Extração CONTAS concluída: {len(df)} registros")
        logging.info(f"   Colunas extraídas: {list(df.columns)}")
        
        # Log de estatísticas básicas
        if not df.empty:
            logging.info(f"   Referências únicas: {df['REFERENCIA'].nunique()}")
            logging.info(f"   Registros pagos: {len(df[df['PAGO'] == 'S'])}")
            logging.info(f"   Registros pendentes: {len(df[df['PAGO'] == 'N'])}")
            logging.info(f"   Valor total: {df['VALOR'].sum():.2f}")
        
        return df
        
    except SQLAlchemyError as e:
        error_msg = f"Erro SQL na extração da tabela CONTAS: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)
    except Exception as e:
        error_msg = f"Erro inesperado na extração da tabela CONTAS: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)


def get_fcaixa(conn) -> pd.DataFrame:
    """
    Extrai dados da tabela FCAIXA usando SQL parametrizado.
    
    Args:
        conn: Conexão com banco de dados
        
    Returns:
        pd.DataFrame: Dados extraídos da tabela FCAIXA
        
    Raises:
        ExtractionError: Se houver erro na extração
    """
    try:
        # Define colunas esperadas
        expected_columns = ['N_OS', 'DATA_PGTO', 'VALOR', 'FORMA_PGTO']
        
        # Query parametrizada
        query = text("""
            SELECT 
                N_OS,
                DATA_PGTO,
                VALOR,
                FORMA_PGTO
            FROM FCAIXA
        """)
        
        logging.info("Iniciando extração da tabela FCAIXA...")
        
        # Executa query
        df = pd.read_sql(query, conn)
        
        # Valida colunas
        validate_required_columns(df, 'FCAIXA', expected_columns)
        
        # Log detalhado da extração
        logging.info(f"✅ Extração FCAIXA concluída: {len(df)} registros")
        logging.info(f"   Colunas extraídas: {list(df.columns)}")
        
        # Log de estatísticas básicas
        if not df.empty:
            logging.info(f"   Ordens únicas: {df['N_OS'].nunique()}")
            logging.info(f"   Período: {df['DATA_PGTO'].min()} a {df['DATA_PGTO'].max()}")
            logging.info(f"   Valor total: {df['VALOR'].sum():.2f}")
            
            # Estatísticas por forma de pagamento
            formas_pgto = df['FORMA_PGTO'].value_counts()
            logging.info(f"   Formas de pagamento: {dict(formas_pgto)}")
        
        return df
        
    except SQLAlchemyError as e:
        error_msg = f"Erro SQL na extração da tabela FCAIXA: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)
    except Exception as e:
        error_msg = f"Erro inesperado na extração da tabela FCAIXA: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)


def get_extraction_summary(ordens_df: pd.DataFrame, contas_df: pd.DataFrame, fcaixa_df: pd.DataFrame) -> Dict[str, Any]:
    """
    Gera um resumo da extração de dados para auditoria.
    
    Args:
        ordens_df: DataFrame da tabela ORDENS
        contas_df: DataFrame da tabela CONTAS
        fcaixa_df: DataFrame da tabela FCAIXA
        
    Returns:
        dict: Resumo da extração
    """
    try:
        summary = {
            'timestamp': pd.Timestamp.now(),
            'tables': {
                'ORDENS': {
                    'records': len(ordens_df),
                    'columns': list(ordens_df.columns),
                    'date_range': {
                        'min': ordens_df['DATA_PGTO'].min() if not ordens_df.empty else None,
                        'max': ordens_df['DATA_PGTO'].max() if not ordens_df.empty else None
                    }
                },
                'CONTAS': {
                    'records': len(contas_df),
                    'columns': list(contas_df.columns),
                    'unique_references': contas_df['REFERENCIA'].nunique() if not contas_df.empty else 0
                },
                'FCAIXA': {
                    'records': len(fcaixa_df),
                    'columns': list(fcaixa_df.columns),
                    'unique_orders': fcaixa_df['N_OS'].nunique() if not fcaixa_df.empty else 0
                }
            },
            'total_records': len(ordens_df) + len(contas_df) + len(fcaixa_df)
        }
        
        logging.info("📊 RESUMO DA EXTRAÇÃO:")
        logging.info(f"   Total de registros: {summary['total_records']}")
        logging.info(f"   ORDENS: {summary['tables']['ORDENS']['records']} registros")
        logging.info(f"   CONTAS: {summary['tables']['CONTAS']['records']} registros")
        logging.info(f"   FCAIXA: {summary['tables']['FCAIXA']['records']} registros")
        
        return summary
        
    except Exception as e:
        logging.error(f"Erro ao gerar resumo da extração: {e}")
        return {}


def extract_all_data(conn) -> tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """
    Extrai dados de todas as tabelas necessárias.
    
    Args:
        conn: Conexão com banco de dados
        
    Returns:
        tuple: (ordens_df, contas_df, fcaixa_df)
        
    Raises:
        ExtractionError: Se houver erro em qualquer extração
    """
    try:
        logging.info("🚀 Iniciando extração completa de dados...")
        
        # Extrai dados de todas as tabelas
        ordens_df = get_ordens(conn)
        contas_df = get_contas(conn)
        fcaixa_df = get_fcaixa(conn)
        
        # Gera resumo para auditoria
        summary = get_extraction_summary(ordens_df, contas_df, fcaixa_df)
        
        logging.info("✅ Extração completa concluída com sucesso!")
        
        return ordens_df, contas_df, fcaixa_df
        
    except Exception as e:
        error_msg = f"Erro na extração completa de dados: {e}"
        logging.error(error_msg)
        raise ExtractionError(error_msg)


# ================= modules/processors.py =================
# Arquivo: modules/processors.py
import pandas as pd


def process_recebimentos(
    ordens_df: pd.DataFrame,
    contas_df: pd.DataFrame,
    fcaixa_df: pd.DataFrame,
    periodo: str = None
) -> pd.DataFrame:
    """
    Monta a tabela consolidada de recebimentos:
    Colunas: N° OS, DATA ENCERRAMENTO, VALOR TOTAL, VALOR MÃO DE OBRA,
             VALOR PEÇAS, DESCONTO, VEÍCULO (PLACA), CÓDIGO CLIENTE,
             VALOR PAGO, DEVEDOR, CARTÃO, DINHEIRO, PIX, TROCO
    
    Args:
        periodo: Formato 'YYYY-MM' para filtrar DATA_PGTO (ex: '2024-01')
    """
    # --- Prepara ordens ---
    ordens = ordens_df.copy()
    ordens['VALOR TOTAL'] = ordens[['VALOR_MAO_DE_OBRA','VALOR_PECAS','VALOR_DESLOCA','VALOR_TERCEIRO','VALOR_OUTROS']].sum(axis=1)
    ordens['VEÍCULO (PLACA)'] = ordens['APARELHO'] + ' (' + ordens['MODELO'] + ')'
    ordens_proc = ordens.rename(columns={
        'CODIGO': 'N° OS',
        'SAIDA': 'DATA ENCERRAMENTO',
        'VALOR_MAO_DE_OBRA': 'VALOR MÃO DE OBRA',
        'VALOR_PECAS': 'VALOR PEÇAS',
        'VALOR_OUTROS': 'DESCONTO'
    })[[
        'N° OS','DATA ENCERRAMENTO','VALOR TOTAL',
        'VALOR MÃO DE OBRA','VALOR PEÇAS','DESCONTO','VEÍCULO (PLACA)'
    ]]

    # --- Prepara FCAIXA: extrai código numérico e soma receitas por forma ---
    fcaixa = fcaixa_df.copy()
    fcaixa['COD_CONTA'] = (
        fcaixa['COD_CONTA']
        .astype(str)
        .str.extract(r'R(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )
    pix_receita = fcaixa[fcaixa['FORMA_PGTO'] == 5].groupby('COD_CONTA')['VALOR'].sum()
    dinheiro_receita = fcaixa[fcaixa['FORMA_PGTO'] == 0].groupby('COD_CONTA')['VALOR'].sum()

    # --- Prepara CONTAS para VALOR PAGO (PAGO = 'S') ---
    contas_pagas = contas_df.copy()
    contas_pagas['CODIGO'] = pd.to_numeric(contas_pagas['CODIGO'], errors='coerce').fillna(0).astype(int)
    contas_pagas['OS'] = contas_pagas['REFERENCIA'].astype(str).str.extract(r'^O(\d+)$', expand=False)
    contas_pagas = contas_pagas.dropna(subset=['OS']).copy()
    contas_pagas['OS'] = contas_pagas['OS'].astype(int)
    
    # --- Filtra apenas contas pagas (PAGO = 'S') ---
    contas_pagas = contas_pagas[contas_pagas['PAGO'] == 'S'].copy()
    
    # --- Filtra por DATA_PGTO do período especificado ---
    if periodo:
        contas_pagas['DATA_PGTO'] = pd.to_datetime(contas_pagas['DATA_PGTO'], errors='coerce')
        contas_pagas['MES_PGTO'] = contas_pagas['DATA_PGTO'].dt.strftime('%Y-%m')
        contas_pagas = contas_pagas[contas_pagas['MES_PGTO'] == periodo].copy()
        contas_pagas = contas_pagas.drop(columns=['MES_PGTO'])
    
    contas_pagas = contas_pagas.merge(pix_receita.rename('RECEITA_PIX'),
                          left_on='CODIGO', right_index=True, how='left')
    contas_pagas = contas_pagas.merge(dinheiro_receita.rename('RECEITA_DINHEIRO'),
                          left_on='CODIGO', right_index=True, how='left')
    contas_pagas = contas_pagas.fillna(0)

    # --- Cálculo de DINHEIRO e PIX conforme regra correta ---
    contas_pagas['DINHEIRO'] = contas_pagas['ECF_DINHEIRO'] - contas_pagas['RECEITA_PIX']
    contas_pagas['PIX'] = contas_pagas['ECF_DINHEIRO'] - contas_pagas['RECEITA_DINHEIRO']

    # --- Garante que DATA_PGTO seja datetime e agrega por OS ---
    contas_pagas['DATA_PGTO'] = pd.to_datetime(contas_pagas['DATA_PGTO'], errors='coerce')
    agg_pagas = contas_pagas.groupby('OS').agg({
        'CODIGO_CLIENTE': 'first',
        'VALOR': 'sum',
        'ECF_CARTAO': 'sum',
        'DINHEIRO': 'sum',
        'PIX': 'sum',
        'ECF_TROCO': 'sum',
        'DATA_PGTO': 'max'
    }).rename(columns={
        'CODIGO_CLIENTE': 'CÓDIGO CLIENTE',
        'VALOR': 'VALOR PAGO',
        'ECF_CARTAO': 'CARTÃO',
        'ECF_TROCO': 'TROCO',
        'DATA_PGTO': 'DATA PGTO'
    })

    # --- Prepara CONTAS para DEVEDOR (PAGO = 'N') ---
    contas_devidas = contas_df.copy()
    contas_devidas['CODIGO'] = pd.to_numeric(contas_devidas['CODIGO'], errors='coerce').fillna(0).astype(int)
    contas_devidas['OS'] = contas_devidas['REFERENCIA'].astype(str).str.extract(r'^O(\d+)$', expand=False)
    contas_devidas = contas_devidas.dropna(subset=['OS']).copy()
    contas_devidas['OS'] = contas_devidas['OS'].astype(int)
    
    # --- Filtra apenas contas devidas (PAGO = 'N') ---
    contas_devidas = contas_devidas[contas_devidas['PAGO'] == 'N'].copy()
    
    # --- Agrega DEVEDOR por OS ---
    agg_devidas = contas_devidas.groupby('OS')['VALOR'].sum().rename('DEVEDOR')

    # --- Merge final com as ordens ---
    final = ordens_proc.merge(agg_pagas, left_on='N° OS', right_index=True, how='left')
    final = final.merge(agg_devidas, left_on='N° OS', right_index=True, how='left')
    
    # --- Preenche valores nulos com 0 ---
    final['DEVEDOR'] = final['DEVEDOR'].fillna(0)
    
    return final


# ================= modules/exporters.py =================
# Arquivo: modules/exporters.py

import os
import pandas as pd
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment, PatternFill, Font, Border, Side
from style_config import (
    CONTABEIS_COLS, CURRENCY_FORMATS, DATE_FORMATS, THEMES, 
    DECIMAL_SEPARATORS, COLUMN_WIDTHS, BORDER_STYLES, BORDER_CONFIGS
)

def export_to_excel(
    dataframes_by_month: dict,
    output_dir: str,
    currency: str = 'BRL',
    language: str = 'pt_BR',
    theme: str = 'default',
    decimal_separator: str = None,
    border_theme: str = 'default'
):
    """
    Salva cada DataFrame em planilhas Excel separadas por mês,
    ajustando automaticamente a largura das colunas e formatando
    colunas numéricas em estilo contábil com duas casas decimais.
    Permite customizar símbolo, separador decimal, tema de cores e bordas.
    """
    os.makedirs(output_dir, exist_ok=True)

    currency_format = CURRENCY_FORMATS.get(currency, 'R$ #,##0.00')
    date_format = DATE_FORMATS.get(language, 'dd/mm/yyyy')
    theme_cfg = THEMES.get(theme, THEMES['default'])
    border_cfg = BORDER_CONFIGS.get(border_theme, BORDER_CONFIGS['default'])
    decimal_sep = decimal_separator or DECIMAL_SEPARATORS.get(language, ',')

    for month, df in dataframes_by_month.items():
        filepath = os.path.join(output_dir, f"Recebimentos_{month}.xlsx")
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            sheet_name = month
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            ws = writer.sheets[sheet_name]

            # Estilo de cabeçalho
            header_fill = PatternFill(start_color=theme_cfg['header_bg'], end_color=theme_cfg['header_bg'], fill_type='solid')
            header_font = Font(color=theme_cfg['header_font'], bold=True)

            # Configurar bordas
            border_color = border_cfg['border_color']
            header_border_style = BORDER_STYLES.get(border_cfg['header_border'])
            data_border_style = BORDER_STYLES.get(border_cfg['data_border'])

            for idx, col in enumerate(df.columns, start=1):
                # Ajusta largura da coluna usando configuração personalizada
                column_width = COLUMN_WIDTHS.get(col, COLUMN_WIDTHS['default'])
                ws.column_dimensions[get_column_letter(idx)].width = column_width

                # Aplica formatação contábil para colunas numéricas
                if col in CONTABEIS_COLS:
                    for row_idx, cell in enumerate(ws[get_column_letter(idx)][1:], start=2):
                        cell.number_format = currency_format
                        cell.alignment = Alignment(horizontal='left')
                        cell.fill = PatternFill(start_color=theme_cfg['contabil_bg'], end_color=theme_cfg['contabil_bg'], fill_type='solid')
                        cell.font = Font(color=theme_cfg['contabil_font'])
                        
                        # Aplica bordas aos dados
                        if data_border_style:
                            cell.border = Border(
                                left=Side(style=data_border_style, color=border_color),
                                right=Side(style=data_border_style, color=border_color),
                                top=Side(style=data_border_style, color=border_color),
                                bottom=Side(style=data_border_style, color=border_color)
                            )

                # Aplica estilo ao cabeçalho
                header_cell = ws[f"{get_column_letter(idx)}1"]
                header_cell.fill = header_fill
                header_cell.font = header_font
                header_cell.alignment = Alignment(horizontal='center')
                
                # Aplica bordas ao cabeçalho
                if header_border_style:
                    header_cell.border = Border(
                        left=Side(style=header_border_style, color=border_color),
                        right=Side(style=header_border_style, color=border_color),
                        top=Side(style=header_border_style, color=border_color),
                        bottom=Side(style=header_border_style, color=border_color)
                    )

            # Ajusta separador decimal se necessário (apenas visual, não altera valores)
            # (Excel usa o separador do sistema, mas podemos ajustar o formato se necessário)
            # Não implementado aqui pois depende do Excel do usuário


# ================= utils/helpers.py =================
# Arquivo: utils/helpers.py

# (arquivo vazio)


# ================= requirements.txt =================
pyodbc
pandas
python-dotenv
openpyxl 